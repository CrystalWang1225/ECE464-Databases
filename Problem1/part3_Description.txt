Yuecen Wang Part3 - Description

In order to expand the codebase to a larger scale, I have added/changed the following tables:
1. I changed the age that contained in the original sailor table to DOB, which represents date of birth, so it doesn't needed to be updated every year and can easily get age from date of birth too.
2. I added a price in the reserves table so then the revenue of the renting service can be calculated. The price should change according to its popularity and time period.
3. In order to achieve the idea of having weekly payment and for the company to keep track on the profit, another three tables are added. Employee table records employee's information with their hourly wage rate. The work_sheet records how many hours they have worked on each day. The costs tabel records how much it costs to fix a certain boat. The total profit can be then calculated by the total revenue subtracted by the amount of wages paid and the the costs for fixing the boats. s

All the changed/added schemas are shown below

mysql> describe sailors;
+--------+-------------+------+-----+---------+----------------+
| Field  | Type        | Null | Key | Default | Extra          |
+--------+-------------+------+-----+---------+----------------+
| sid    | int         | NO   | PRI | NULL    | auto_increment |
| sname  | varchar(20) | YES  |     | NULL    |                |
| rating | int         | YES  |     | NULL    |                |
| dob    | date        | YES  |     | NULL    |                |
+--------+-------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)

mysql> describe employees;
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| eid        | int         | NO   | PRI | NULL    | auto_increment |
| ename      | varchar(20) | YES  |     | NULL    |                |
| start_date | date        | YES  |     | NULL    |                |
| wage       | int         | YES  |     | NULL    |                |
+------------+-------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

mysql> describe costs;
+-------+------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------+------+-----+---------+-------+
| cid   | int  | NO   | PRI | NULL    |       |
| eid   | int  | NO   | PRI | NULL    |       |
| bid   | int  | NO   | PRI | NULL    |       |
| cost  | int  | YES  |     | NULL    |       |
| date  | date | YES  |     | NULL    |       |
+-------+------+------+-----+---------+-------+
5 rows in set (0.00 sec)

+-------------+------+------+-----+---------+-------+
| Field       | Type | Null | Key | Default | Extra |
+-------------+------+------+-----+---------+-------+
| eid         | int  | YES  | MUL | NULL    |       |
| date        | date | YES  |     | NULL    |       |
| total_hours | int  | YES  |     | NULL    |       |
+-------------+------+------+-----+---------+-------+
3 rows in set (0.00 sec)

    -> ;
+-------+------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------+------+-----+---------+-------+
| sid   | int  | NO   | PRI | NULL    |       |
| bid   | int  | NO   | PRI | NULL    |       |
| day   | date | YES  |     | NULL    |       |
| price | int  | YES  |     | NULL    |       |
+-------+------+------+-----+---------+-------+
4 rows in set (0.01 sec)

Example's on the operations the new schema can do:

weekly payment:
mysql> SELECT employees.eid, employees.ename ,employees.wage * work_sheets.total_hours AS Wages FROM work_sheets JOIN employees ON employees.eid=work_sheets.eid WHERE date >= '2020/10/10' AND date <= '2020/10/27';
+-----+---------+-------+
| eid | ename   | Wages |
+-----+---------+-------+
|   2 | Crystal |   176 |
|   2 | Crystal |   110 |
|   1 | Kevin   |   160 |
|   1 | Kevin   |    60 |
|   4 | Hana    |   144 |
|   5 | Karina  |   100 |
|   1 | Kevin   |   140 |
+-----+---------+-------+
7 rows in set (0.01 sec)

total profit for each boat: 
mysql> SELECT r.bid, SUM(r.price) - SUM(c.cost) AS profit from costs as c JOIN reserves as r ON c.bid =r.bid  GROUP BY r.bid ORDER BY r.bid;
+-----+--------+
| bid | profit |
+-----+--------+
| 101 |    160 |
| 103 |    430 |
| 104 |    800 |
| 105 |    360 |
| 107 |    377 |
| 108 |    161 |
| 109 |    640 |
| 110 |    162 |
+-----+--------+
8 rows in set (0.01 sec)

